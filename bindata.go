package cbcluster

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _data_couchbase_node_service_template = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x93\x5f\xcb\xd3\x30\x14\xc6\xef\xfb\x29\x72\x21\x0c\x84\xbc\xf1\x42\x6f\x5e\xe9\x45\x9d\x7d\xa5\x37\xeb\x68\xeb\x10\xc6\x28\x59\x7a\xe6\xc2\xd2\x24\xe6\x4f\x37\x19\xfb\xee\x66\xeb\x58\x75\x45\x27\xe2\x5d\xf8\xf1\x3c\x4f\xce\x73\xe0\x2c\x3f\x4b\xee\x56\xd1\x47\xb0\xcc\x70\xed\xb8\x92\x31\x53\x9e\x6d\xd7\xd4\x42\x2d\x55\x03\x51\xb2\x71\x60\xe2\x46\xb1\x1d\x98\x27\x0b\xa6\xe3\x0c\xa2\x02\xbe\x79\x6e\xc0\xde\xf3\x5e\x0c\x8e\x35\x63\xe9\x2f\x34\x5a\x96\xfd\x6b\x15\x55\xbc\x05\xe5\x5d\xe9\xa8\x71\x25\xb0\xf8\xcd\x40\x94\xee\x41\x2a\x3b\x6e\x94\x6c\x41\xba\x17\x2e\x20\x26\x21\x8b\xc0\x00\xa3\xf4\x00\xec\x12\x30\x37\x10\x63\xe2\xad\x21\x6b\x2e\x49\x3f\x1d\xda\x71\x21\xd0\xad\xd6\x03\xb1\x69\x7f\x27\xbd\x57\x6a\x1f\x62\x9d\x80\xef\x0d\xc8\x77\x7c\x7f\x20\x37\x1f\x3e\xd7\x04\x83\x8f\x47\xf4\x34\xfd\x50\x2f\xd2\xa2\xcc\xf2\x19\x3a\x9d\x9e\x2f\x24\x9f\x55\x49\x36\x4b\x8b\xba\x4a\x3e\x05\xf8\xcf\xbf\x30\xe1\x6d\xd8\x37\xfe\xaa\x1e\xe4\xc6\x97\xc0\xe0\xd9\x22\xcc\xd0\x64\x54\xd9\x4b\x84\xb1\xa4\x2d\x0c\xd5\x11\xee\x10\x51\xda\x0d\xdf\x91\x8e\x9a\xe7\x31\x3a\x3b\xc1\xc5\x5b\x65\xdd\xff\x58\x06\xfa\xc9\x77\x1e\x7d\x72\x6d\xa1\xf4\xdf\x95\xf8\xf3\x28\x0f\x36\x86\xbc\x6e\xa8\x03\xbc\x37\x54\xeb\x90\x39\x32\x22\x03\xad\xea\x00\x53\xd9\x60\x03\x6b\x2a\xa8\x64\x61\x55\x58\x28\x46\x05\xe6\x1a\xbd\x9a\xe6\x45\x9a\x97\xf5\xbc\xc8\x16\x49\x95\xd6\xd9\x7c\xf1\xf6\x3d\xb2\xbe\x51\xe8\x3a\xa7\x0d\x55\x86\xe0\x49\xb8\x84\x2f\xf8\x45\x00\x84\x2b\x9c\x2a\xb9\x11\x9c\x39\x7b\x77\x83\xaf\x6f\x67\xf3\x23\x00\x00\xff\xff\x6f\x86\x56\xbc\xaf\x03\x00\x00")

func data_couchbase_node_service_template_bytes() ([]byte, error) {
	return bindata_read(
		_data_couchbase_node_service_template,
		"data/couchbase_node@.service.template",
	)
}

func data_couchbase_node_service_template() (*asset, error) {
	bytes, err := data_couchbase_node_service_template_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "data/couchbase_node@.service.template", size: 943, mode: os.FileMode(420), modTime: time.Unix(1425610643, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _data_couchbase_sidekick_service_template = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x52\x4d\x6b\xdb\x40\x14\xbc\xef\xaf\xd8\x43\x21\xa7\x8d\x7a\x68\x2f\x85\x85\x2a\xa9\x52\x74\x88\x64\x24\x39\x14\x8c\x11\xca\xea\xb9\x7a\x68\xb5\xab\xee\x47\x92\x62\xfc\xdf\x2b\x59\xc5\xae\x2d\xd3\x9a\xde\x96\xd9\x99\x79\xf3\x86\xb7\x5a\x2a\x74\x6b\xf2\x05\xac\x30\xd8\x3b\xd4\x8a\x0b\xed\x45\xf3\x5c\x59\x28\x2d\xd6\xd0\xa2\x68\x49\xb8\x71\x60\x78\xad\x45\x0b\xe6\xd6\x82\x79\x41\x01\x24\x83\x1f\x1e\x0d\xd8\x73\x7c\x22\x83\x13\xf5\x9c\x7a\x82\x4e\xc4\x8d\x04\x70\x73\xe6\x29\x7c\x87\xaa\xb6\x85\xfe\x23\x9b\xd2\x35\x7c\xde\x6e\xe9\xed\x32\x89\x8b\x32\x59\x3e\xde\x45\x19\xdd\xed\xce\xcc\xaf\xe7\x93\x55\x3e\xbd\xd6\xa4\xc0\x0e\xb4\x77\xb9\xab\x8c\xcb\x41\xf0\xf7\x24\x52\x2f\x68\xb4\xea\x40\xb9\x07\x94\xc0\x83\x61\x8f\x00\x8e\x20\x89\xde\x40\xec\xf9\x0b\x03\x9c\x05\xde\x9a\xe0\x19\x55\x30\x35\x43\x5b\x94\x92\x1e\xa2\xb0\x43\xad\x7f\x57\x99\xee\x9f\x9a\x73\x49\xef\x87\x41\x4e\xc2\xcf\x1a\xd4\x47\x7c\x7d\x0b\x8e\x06\x42\x7a\x3b\x34\xc2\xbe\xeb\x4f\x63\x0b\xf7\x69\x52\x84\x71\x12\x65\x65\x11\x7e\x1d\x7a\x38\xfa\xf2\xbd\xe1\xa0\x69\x28\x13\xf4\x66\x96\xca\x2b\xca\x98\xaa\x3a\xb8\x90\x6e\xfc\x01\xc7\x1b\x6d\xdd\xff\xc5\xa0\xbe\xaf\x2b\x07\xec\xd5\x54\x7d\x3f\x4c\x9b\x09\xa9\x1d\x33\xb2\x8b\xa3\xa5\x16\x95\x64\xd8\xf3\x77\xf7\x69\x16\xa5\x79\xb9\xc8\xe2\xa7\xb0\x88\xca\x78\xf1\xf4\xe1\xe6\xf7\x86\xba\x9f\xb5\x66\x07\xf0\x52\xd5\x64\xf5\x8d\x3d\x8c\x67\xb8\x26\x8f\x95\x68\x50\x41\xba\xb9\xfe\xa2\x7e\x05\x00\x00\xff\xff\x28\xcb\x1c\xaa\x5a\x03\x00\x00")

func data_couchbase_sidekick_service_template_bytes() ([]byte, error) {
	return bindata_read(
		_data_couchbase_sidekick_service_template,
		"data/couchbase_sidekick@.service.template",
	)
}

func data_couchbase_sidekick_service_template() (*asset, error) {
	bytes, err := data_couchbase_sidekick_service_template_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "data/couchbase_sidekick@.service.template", size: 858, mode: os.FileMode(420), modTime: time.Unix(1425654765, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _data_sync_gw_node_service_template = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\xb1\x6e\xdb\x30\x10\xdd\xf9\x15\x1c\x02\xa4\x2d\x40\xb1\x4b\x97\x14\x1a\x0c\xd7\x09\x32\xc4\x29\x62\x17\x6d\x61\x18\x82\x42\x9d\xe5\x6b\x28\x52\x25\x8f\x56\x8c\x20\xff\x5e\x2a\x4a\xe2\xca\x4e\x60\xd8\x1b\x71\x7a\x77\xf7\xde\xa3\x1e\x67\x3f\x0c\xd2\x9c\x7d\x03\xaf\x1c\xd6\x84\xd6\xa4\x7e\x6d\x54\x56\x36\x99\xb1\x05\xb0\xc1\x82\xc0\xa5\x85\x55\x77\xe0\x12\x0f\x6e\x85\x0a\xd8\x0d\xfc\x0d\xe8\xc0\x6f\xd7\x3b\x30\x90\x2a\x76\xa1\xbd\x6a\x07\x5c\x68\x00\xda\x45\xf6\xcb\x6c\x36\xe9\x4e\x73\x36\xc5\x0a\x6c\xa0\x09\xe5\x8e\x26\xa0\xd2\xcf\x6c\x64\x56\xe8\xac\xa9\xc0\xd0\x39\x6a\x48\x65\xdc\x22\x61\x53\x64\xa3\x7b\x50\x4f\xf8\xef\x0e\x52\x21\x83\x77\xf2\x16\x8d\xec\x78\xf3\x3b\xd4\x9a\x3f\xcb\xdd\x03\x75\xd5\xdb\xc0\x6d\x5c\x1d\xe2\x48\xd2\xb0\x2e\xc0\x7c\xc1\xe6\x5e\xb6\x5d\xa2\xcc\x09\x9a\x7c\x2d\x94\x75\x60\xfd\xd9\xc3\x03\x4f\x86\xd7\xe3\xe9\xe0\x72\x3c\xba\xc9\xa6\x83\x0b\xfe\xf8\x78\xe0\x58\x65\x83\x5a\xde\xe6\x1e\x84\xd2\xc1\x47\x37\x45\x69\x8f\x98\xeb\x82\xe1\x42\x18\xa0\x74\x69\x3d\x1d\x45\x9c\x87\xba\x88\x28\xd1\xb8\xbc\xae\xe3\xc8\x1d\x66\xbc\xc9\x91\x44\x30\x84\x5a\xc4\x7d\x06\x4d\x79\x10\x29\xb1\xe2\x72\x69\x2b\x90\x2d\x89\xb3\xcd\xf1\x38\x3f\xb6\xe9\x76\x32\x9b\xa8\xd0\x2c\xb0\xe4\x0e\x1a\x87\x04\x71\x7f\x01\x9e\xd0\xe4\x6d\x24\xfe\xdb\x2f\x93\x7e\x43\xf2\xc7\x5b\xb3\x91\x93\x3e\xe9\x88\x3c\x96\x5c\x28\x7e\x3a\xf9\x3d\x1e\x66\x17\x3f\xb3\xe1\xf5\xd5\xd5\xe5\x34\x3d\xf9\xd0\xa6\x40\x91\xe6\x25\x10\xdf\x70\x4e\x94\xad\x7a\x7e\xc7\x4f\x55\x85\xf4\xf1\x2b\xe7\xef\x98\x93\x57\xf0\xf2\x43\x1e\xec\xd5\x1b\x37\xfb\x6a\x83\x6f\x55\xb4\xdc\x4f\xfa\xdc\xb9\x28\xf9\x3e\x1b\x4e\x9f\x7d\xb0\xf5\xce\x95\xfa\x58\x7c\x0d\x10\x9b\xfd\x12\xe7\x6d\xc8\xe7\x6c\x18\xbb\x35\x2a\xf2\xbd\x57\xe7\xd3\x4b\xfa\xff\x05\x00\x00\xff\xff\xf1\xff\x6e\xa1\x9e\x04\x00\x00")

func data_sync_gw_node_service_template_bytes() ([]byte, error) {
	return bindata_read(
		_data_sync_gw_node_service_template,
		"data/sync_gw_node@.service.template",
	)
}

func data_sync_gw_node_service_template() (*asset, error) {
	bytes, err := data_sync_gw_node_service_template_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "data/sync_gw_node@.service.template", size: 1182, mode: os.FileMode(420), modTime: time.Unix(1425661559, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _data_sync_gw_node_service_template_ = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x54\xc1\x6e\x13\x31\x10\xbd\xfb\x2b\x7c\xa8\x54\x40\x72\xcc\x85\x4b\xd1\x1e\x50\x68\x11\x87\x02\x22\x45\x80\xa2\x28\xda\x7a\x27\x9b\xa1\xf6\x78\xb1\xc7\xd9\xe6\xef\xf1\x76\xdb\x86\xcd\xb6\x6a\x72\x9b\xbc\x3c\xcf\x7b\x6f\x3c\xde\xf9\x0f\x42\x5e\x88\x8f\x10\x4d\xc0\x86\xd1\x53\x11\xb7\x64\x96\x75\xbb\x24\x5f\x81\xf8\xb0\x62\x08\x45\xe5\xcd\x0d\x84\x49\x84\xb0\x41\x03\xe2\x3b\xfc\x4d\x18\x20\xee\xe3\x3d\x19\xd8\x54\x63\xea\x00\xed\x89\x2b\x0b\xc0\x63\xe6\x10\x16\xf3\x59\x5f\x2d\xc4\x15\x3a\xf0\x89\x67\x5c\x06\x9e\x81\x29\xde\x8a\x73\xda\x60\xf0\xe4\x80\xf8\x02\x2d\x14\x3a\xab\x68\xd8\x81\xe2\xfc\x16\xcc\x1d\xff\x5b\x80\x42\xe9\x14\x83\xbe\x46\xd2\xbd\x6f\x79\x83\xd6\xca\xfb\xb8\x2f\x50\x83\x7b\x9a\xb8\xcf\x6b\x52\x6e\xc9\x16\xb6\x15\xd0\x3b\x6c\x6f\x75\x77\x4a\xd5\x25\x43\x5b\x6e\x95\xf1\x01\x7c\x3c\xb3\xf9\x67\xe4\x23\x1b\x19\x9f\xcc\xfa\xba\x8c\xa0\x8c\x4d\x31\xcf\x4f\xd5\xfe\xa0\x4e\x21\x91\x54\x8a\x80\x8b\xb5\x8f\x7c\xa0\x39\x99\x9a\x2a\x17\xaa\x0d\x65\xd3\xe4\x26\x23\x75\xd9\x96\xc8\x2a\x11\xa3\x55\x59\x81\x90\xea\xa3\x6c\xa8\x8d\xd4\x6b\xef\x40\x77\xb2\x67\xbb\xf2\xd0\xcc\xfb\x06\xfb\x28\x6d\x4e\x41\x2b\xac\x65\x80\x36\x20\x43\x56\xac\x32\x19\xa9\xec\x56\xfb\x3f\x45\xdd\xf3\x26\x7f\xa2\xa7\x9d\xef\xe2\xce\x70\x16\x5c\x4b\x65\xe4\xe9\xec\xf7\x97\xe9\xf2\xd3\xcf\xe5\xf4\xeb\xe5\xe5\xe7\xab\xe2\xe4\x55\xb7\xc4\x86\xad\xac\x81\xe5\xce\xdc\xc4\x78\x37\x18\x65\xfe\xcb\x39\xe4\xd7\xef\xa5\x7c\x66\x0a\xa5\x83\x87\x7d\x3a\x7a\x28\x4f\x5c\xda\x63\xfa\xd8\xa5\xe8\xbc\x9f\x0c\xbd\x4b\x55\xcb\x67\xd2\x9f\xde\xc7\xf7\xcd\xe8\xca\x62\x06\x1f\xd7\x5e\xcc\x7f\xa9\x8b\xee\x69\x2e\xc4\x34\x9f\xb6\x68\x38\x0e\xbe\x15\x6f\x1e\xde\xec\xbf\x00\x00\x00\xff\xff\x27\x60\x83\xe6\x54\x04\x00\x00")

func data_sync_gw_node_service_template__bytes() ([]byte, error) {
	return bindata_read(
		_data_sync_gw_node_service_template_,
		"data/sync_gw_node@.service.template~",
	)
}

func data_sync_gw_node_service_template_() (*asset, error) {
	bytes, err := data_sync_gw_node_service_template__bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "data/sync_gw_node@.service.template~", size: 1108, mode: os.FileMode(420), modTime: time.Unix(1425612410, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _data_sync_gw_sidekick_service_template = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x52\xcb\x6a\xdc\x30\x14\xdd\xeb\x2b\xb4\x28\x64\xa5\xb8\x8b\x76\x53\x10\xd4\x49\x9d\xe2\x45\xec\xc1\xf6\x84\xc2\x10\x8c\x22\xdf\x8c\x2f\x96\x25\x57\x8f\x38\x21\xe4\xdf\xab\xc9\xa4\x49\x3b\x86\x76\xc8\x4e\x1c\xce\x4b\x87\xbb\x59\x6b\xf4\xd7\xe4\x1b\x38\x69\x71\xf2\x68\x34\x77\x0f\x5a\xb6\xdb\xb9\x75\xd8\xc1\x80\x72\x20\xe9\xad\x07\xcb\x3b\x23\x07\xb0\xa7\x0e\xec\x1d\x4a\x20\x15\xfc\x0c\x68\xc1\x1d\xe2\x7b\x32\x78\xd9\x2d\xa9\x7f\xa1\x67\xa8\x3b\xd7\x98\xd7\x38\x6d\x3a\xf8\xfa\xf8\x48\x4f\xd7\x45\xde\xb4\xc5\xfa\xf2\x2c\xab\xe8\xd3\xd3\x81\xf1\xb1\x6c\xb2\xa9\xf7\xaf\x6b\xd2\xe0\x08\x26\xf8\xda\x0b\xeb\x6b\x90\xfc\x23\xc9\xf4\x1d\x5a\xa3\x47\xd0\xfe\x02\x15\xf0\x24\x16\x4b\xe0\x0d\x24\xd9\x3d\xc8\x67\xfe\xca\x02\x67\x49\x70\x36\xb9\x41\x9d\xec\xbf\x4a\x07\x54\x8a\xee\x8a\xb0\xed\xcc\x5e\x57\xfa\xb7\xc6\x8e\xff\x51\x1c\x0a\xa6\x10\x43\xbc\x82\x87\x0e\xf4\x67\x9c\xef\x13\x69\x82\xec\x6f\x84\x03\x26\x55\x70\x71\x0b\xb6\x35\x5f\x76\x0b\x9c\x97\x45\x93\xe6\x45\x56\xb5\x4d\xfa\x3d\x6e\xf0\xe6\xcb\x9f\x0d\xa3\xa6\xa7\x4c\xd2\x93\x45\xa7\xa0\x29\x63\x5a\x8c\xb0\xe8\xb6\xc3\xc1\xf3\xde\x38\xff\xbe\x12\x34\x4c\x9d\xf0\xc0\x66\x2b\xa6\x29\x66\xfd\x0e\x78\x91\x51\x25\x82\x96\xfd\x9f\x79\xca\x48\xa1\x18\x4e\xfc\xc3\x79\x59\x65\x65\xdd\xae\xaa\xfc\x2a\x6d\xb2\x36\x5f\x5d\x7d\x3a\x79\xf9\x94\x99\x16\x43\xb9\x08\x2e\xb7\x25\x9b\x1f\xec\x42\x01\xc4\xdb\xbe\x14\xb2\x47\x0d\xe5\xed\xd1\xc7\xf3\x2b\x00\x00\xff\xff\x90\x04\x86\x17\x15\x03\x00\x00")

func data_sync_gw_sidekick_service_template_bytes() ([]byte, error) {
	return bindata_read(
		_data_sync_gw_sidekick_service_template,
		"data/sync_gw_sidekick@.service.template",
	)
}

func data_sync_gw_sidekick_service_template() (*asset, error) {
	bytes, err := data_sync_gw_sidekick_service_template_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "data/sync_gw_sidekick@.service.template", size: 789, mode: os.FileMode(420), modTime: time.Unix(1425654434, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _data_sync_gw_sidekick_service_template_ = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\x4f\x4f\xc2\x40\x10\xc5\xef\xfb\x29\x7a\x30\xe1\xb4\x56\x13\xbd\x98\x6c\x22\x6a\x49\x38\x18\x08\x45\x62\x42\x48\xb3\x6c\x07\x3a\xe9\x76\xb7\xee\x1f\x0a\xdf\xde\xe5\x8f\x88\x34\xa8\xb7\xcd\xdb\x37\xef\x37\x33\x99\xe9\x9b\x42\x37\x23\x2f\x60\x85\xc1\xda\xa1\x56\xcc\x6e\x94\xc8\x96\x4d\x66\x31\x87\x12\x45\x49\xba\x0b\x07\x86\xe5\x5a\x94\x60\xae\x2d\x98\x15\x0a\x20\x23\xf8\xf0\x68\xc0\x9e\xeb\x7b\x33\x38\x91\xb7\xad\x3f\xd4\x27\x54\xb9\x1d\xeb\x23\x4e\xe9\x1c\x1e\x6f\xcf\x72\x2e\x7c\x92\x69\xba\x7f\xcd\xc8\x18\x2b\xd0\xde\xa5\x8e\x1b\x97\x82\x60\x37\x24\x51\x2b\x34\x5a\x55\xa0\x5c\x0f\x25\xb0\x38\x60\x63\xf8\x16\x49\xb2\x06\xb1\xf3\x0f\x0d\x30\x1a\x7b\x6b\xe2\x39\xaa\x78\x3f\x48\x54\xa2\x94\xd1\x96\x4b\x97\x0d\x3d\xee\xe0\xf7\x1a\x53\xfd\x51\x71\x5e\x50\xfb\x00\x71\x12\x36\x39\xa8\x7b\x6c\xd6\xb1\xd0\x5e\x14\x73\x6e\x81\x0a\xe9\x6d\x18\x9d\x2e\xf5\x83\xe4\x0e\xec\x49\xbf\x6c\x17\x11\x5c\x45\x44\x45\xd4\x69\x75\xe1\x55\x44\xa9\xe2\x15\xb4\xba\xd9\xea\xe0\x58\xa1\xad\xfb\x2f\x36\xf2\x75\x1e\x1e\xb4\x31\xbc\xae\x43\xfa\x57\xe4\xc1\x18\x49\xee\x95\x28\x4e\x09\x52\x0b\x2e\x29\xd6\xec\xea\x79\x30\x4a\x06\x69\x36\x1c\xf5\x27\xdd\x71\x92\xf5\x87\x93\xbb\xce\x61\x0c\x5d\xb7\x96\x61\x83\xd8\xde\x1f\x99\xbe\xd3\x9e\x04\x08\xd7\xf9\xca\x45\x81\x0a\x06\x8b\x4b\xf7\xf0\x19\x00\x00\xff\xff\xf5\x65\x76\x7c\xc6\x02\x00\x00")

func data_sync_gw_sidekick_service_template__bytes() ([]byte, error) {
	return bindata_read(
		_data_sync_gw_sidekick_service_template_,
		"data/sync_gw_sidekick@.service.template~",
	)
}

func data_sync_gw_sidekick_service_template_() (*asset, error) {
	bytes, err := data_sync_gw_sidekick_service_template__bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "data/sync_gw_sidekick@.service.template~", size: 710, mode: os.FileMode(420), modTime: time.Unix(1425612431, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/couchbase_node@.service.template": data_couchbase_node_service_template,
	"data/couchbase_sidekick@.service.template": data_couchbase_sidekick_service_template,
	"data/sync_gw_node@.service.template": data_sync_gw_node_service_template,
	"data/sync_gw_node@.service.template~": data_sync_gw_node_service_template_,
	"data/sync_gw_sidekick@.service.template": data_sync_gw_sidekick_service_template,
	"data/sync_gw_sidekick@.service.template~": data_sync_gw_sidekick_service_template_,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"data": &_bintree_t{nil, map[string]*_bintree_t{
		"couchbase_node@.service.template": &_bintree_t{data_couchbase_node_service_template, map[string]*_bintree_t{
		}},
		"couchbase_sidekick@.service.template": &_bintree_t{data_couchbase_sidekick_service_template, map[string]*_bintree_t{
		}},
		"sync_gw_node@.service.template": &_bintree_t{data_sync_gw_node_service_template, map[string]*_bintree_t{
		}},
		"sync_gw_node@.service.template~": &_bintree_t{data_sync_gw_node_service_template_, map[string]*_bintree_t{
		}},
		"sync_gw_sidekick@.service.template": &_bintree_t{data_sync_gw_sidekick_service_template, map[string]*_bintree_t{
		}},
		"sync_gw_sidekick@.service.template~": &_bintree_t{data_sync_gw_sidekick_service_template_, map[string]*_bintree_t{
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

